#!/bin/bash

# 变量初始化
projectName="airchain"
workDir="$HOME/satea/$projectName"
walletName=${WALLET_NAME-""}
moniker=${MONIKER-""}
password=${PASSWD-""}
ALL_SATEA_VARS=("projectName" "wallet" "moniker")

mkdir -p $workDir
cd $workDir

# 定义要检查的包列表
packages=(
    jq
    curl
    wget
)

function checkVars() {
    # 循环遍历数组
    for var_name in "${ALL_SATEA_VARS[@]}"; do
        # 动态读取变量的值
        value=$(eval echo \$$var_name)
        if [ -z "$value" ]; then
            # 如果为空，输出错误提示
            echo "Error: Variable $var_name is not set!"
            exit 1
        else
            # 如果不为空，输出变量名及其值
            echo "Variable $var_name value is $value"
        fi
    done
}

#手动模式下 解析并填入变量的函数
function readVariables() {
    >.env.sh
    chmod +x .env.sh
    for var_name in "${ALL_SATEA_VARS[@]}"; do
        read -p "Please input $var_name: " read_value
        echo "$var_name=$read_value" >>.env.sh
    done
}

# 检查并安装每个包
function checkPackages() {
    echo "check packages ..."
    for pkg in "${packages[@]}"; do
        if dpkg-query -W "$pkg" >/dev/null 2>&1; then
            echo "$pkg installed,skip"
        else
            echo "install  $pkg..."
            sudo apt update
            sudo apt install -y "$pkg"
        fi
    done
}

function install() {
    cd $workDir
    git clone https://github.com/airchains-network/wasm-station.git
    git clone https://github.com/airchains-network/tracks.git
    cd wasm-station
    go mod tidy
    /bin/bash ./scripts/local-setup.sh

tee <<EOF >/dev/null /etc/systemd/system/wasmstationd.service
[Unit]
Description=wasmstationd
After=network.target

[Service]
User=$USER
ExecStart=$workDir/wasm-station/build/wasmstationd start --api.enable
Restart=always
RestartSec=3
LimitNOFILE=10000

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload && \
systemctl enable wasmstationd && \
systemctl start wasmstationd

wget https://github.com/airchains-network/tracks/releases/download/v0.0.2/eigenlayer
chmod +x eigenlayer
mv eigenlayer /usr/local/bin/eigenlayer

KEY_FILE="$HOME/.eigenlayer/operator_keys/$walletName.ecdsa.key.json"

if [ -f "$KEY_FILE" ]; then
    echo "文件 $KEY_FILE 已经存在，删除文件"
    rm -f "$KEY_FILE"

    echo "$password" | eigenlayer operator keys create --key-type ecdsa --insecure $walletName 2>&1 | tee $workDir/eigenlayer.txt
else
    echo "文件 $KEY_FILE 不存在，执行创建密钥操作"

    echo "$password" | eigenlayer operator keys create --key-type ecdsa --insecure $walletName 2>&1 | tee $workDir/eigenlayer.txt
fi
cp $workDir/eigenlayer.txt $workDir/eigenlayer.txt.bk
rm -rf ~/.tracks
cd $workDir/tracks
go mod tidy
#!/bin/bash

Public_Key=$(cat $workDir/eigenlayer.txt.bk |grep Public |awk '{print $4}')

go run cmd/main.go init \
    --daRpc "disperser-holesky.eigenda.xyz" \
    --daKey "$Public_Key" \
    --daType "eigen" \
    --moniker "$moniker" \
    --stationRpc "http://127.0.0.1:26657" \
    --stationAPI "http://127.0.0.1:1317" \
    --stationType "wasm"

go run cmd/main.go keys junction --accountName $walletName --accountPath $workDir/.tracks/junction-accounts/keys

go run cmd/main.go prover v1WASM
read -p "是否已经领水完毕要继续执行？(yes/no): " choice

if [[ "$choice" != "yes" ]]; then
    echo "脚本已终止。"
    exit 0
fi
echo "继续执行脚本..."

echo $bootstrapNode
CONFIG_PATH="$workDir/.tracks/config/sequencer.toml"
WALLET_PATH="$workDir/.tracks/junction-accounts/keys/$walletName.wallet.json"

# 从配置文件中提取 nodeid
NODE_ID=$(grep 'node_id =' $CONFIG_PATH | awk -F'"' '{print $2}')

# 从钱包文件中提取 air 开头的钱包地址
AIR_ADDRESS=$(jq -r '.address' $WALLET_PATH)

# 获取本机 IP 地址
LOCAL_IP=$(hostname -I | awk '{print $1}')
# 定义 JSON RPC URL 和其他参数
JSON_RPC="https://airchains-rpc.kubenode.xyz/"
INFO="EVM Track"
TRACKS="air_address"
BOOTSTRAP_NODE="/ip4/$LOCAL_IP/tcp/2300/p2p/$NODE_ID"

# 运行 tracks create-station 命令
create_station_cmd="go run cmd/main.go create-station \
    --accountName $walletName \
    --accountPath $workDir/.tracks/junction-accounts/keys \
    --jsonRPC \"https://airchains-rpc.kubenode.xyz/\" \
    --info \"WASM Track\" \
    --tracks \"$AIR_ADDRESS\" \
    --bootstrapNode \"/ip4/$LOCAL_IP/tcp/2300/p2p/$NODE_ID\""

echo "Running command:"
echo "$create_station_cmd"

# 执行命令
eval "$create_station_cmd"
sudo tee /etc/systemd/system/stationd.service > /dev/null << EOF
[Unit]
Description=station track service
After=network-online.target
[Service]
User=$USER
WorkingDirectory=$workDir/tracks/
ExecStart=$(which go) run cmd/main.go start
Restart=always
RestartSec=3
LimitNOFILE=65535
[Install]
WantedBy=multi-user.target
EOF
sudo systemctl daemon-reload
sudo systemctl enable stationd
sudo systemctl restart stationd
}
function tx_node(){
    cd
addr=$($workDir/wasm-station/build/wasmstationd keys show node --keyring-backend test -a)
sudo tee spam.sh > /dev/null << EOF
#!/bin/bash

while true; do
  $workDir/wasm-station/build/wasmstationd tx bank send node ${addr} 1stake --from node --chain-id station-1 --keyring-backend test -y 
  sleep 6  
done
EOF
nohup bash spam.sh &
}

function start() {
    echo "start ..."
    checkVars
    systemctl start stationd
    systemctl start wasmstationd.service
}

function stop() {
    echo "stop ..."
    systemctl stop stationd
    systemctl stop wasmstationd.service
}


function clean() {
    echo "clean ...."
    systemctl stop stationd
    systemctl stop wasmstationd.service
    rm -rf $workDir
}
#function private_key(){
    #evmos私钥#
 #   cd $workDir/data/airchains/evm-station/ &&  /bin/bash ./scripts/local-keys.sh
    #airchain助记词#
  #  cat $workDir/.tracks/junction-accounts/keys/$walletName.wallet.json

#}
function key(){
    cat $HOME/.tracks/junction-accounts/keys/$walletName.wallet.json
}

function logs() {
    echo "logs ...."
    journalctl -u stationd -f
}

function About() {
    echo '   _____    ___     ______   ______   ___
  / ___/   /   |   /_  __/  / ____/  /   |
  \__ \   / /| |    / /    / __/    / /| |
 ___/ /  / ___ |   / /    / /___   / ___ |
/____/  /_/  |_|  /_/    /_____/  /_/  |_|'

    echo
    echo -e "\xF0\x9F\x9A\x80 Satea Node Installer
Website: https://www.satea.io/
Twitter: https://x.com/SateaLabs
Discord: https://discord.com/invite/satea
Gitbook: https://satea.gitbook.io/satea
Version: V1.0.0
Introduction: Satea is a DePINFI aggregator dedicated to breaking down the traditional barriers that limits access to computing resources.  "
    echo""
}

case $1 in
check-packages)
    checkPackages
    ;;
install)
    if [ "$2" = "--auto" ]; then
        #这里使用自动模式下的 安装 函数
        install
    else
        #手动模式 使用Manual 获取用户输入的变量
        readVariables #获取用户输入的变量
        . .env.sh     #导入变量
        #其他安装函数
        install
    fi
    ;;
start)
    start
    ;;
stop)
    stop
    ;;
key)
    key
    ;;
tx_node)
    tx_node
    ;;
clean)
    clean
    ;;
logs)
    logs
    ;;

**)

    #定义帮助信息 例子
    About
    echo "Flag:
  check-packages       Check basic installation package
  install              Install $projectName environment
  start                Start the $projectName service
  stop                 Stop the $projectName service
  key                  Show your keys
  tx_node              Execute interaction
  clean                Remove the $projectName from your service, remove data!!! 
  logs                 Show the logs of the $projectName service"
    ;;
esac
