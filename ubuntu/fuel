#!/bin/bash

# 变量初始化
projectName=fuel
workDir="$HOME/satea/fuel"
moniker=${MONIKER-""}
ALL_SATEA_VARS=("projectName" "moniker")

mkdir -p $workDir
cd $workDir

# 定义要检查的包列表
packages=(
    jq
    curl
    wget
)

function checkVars() {
    # 循环遍历数组
    for var_name in "${ALL_SATEA_VARS[@]}"; do
        # 动态读取变量的值
        value=$(eval echo \$$var_name)
        if [ -z "$value" ]; then
            # 如果为空，输出错误提示
            echo "Error: Variable $var_name is not set!"
            exit 1
        else
            # 如果不为空，输出变量名及其值
            echo "Variable $var_name value is $value"
        fi
    done
}

#手动模式下 解析并填入变量的函数
function readVariables() {
    >.env.sh
    chmod +x .env.sh
    for var_name in "${ALL_SATEA_VARS[@]}"; do
        read -p "Please input $var_name: " read_value
        echo "$var_name=$read_value" >>.env.sh
    done
}

# 检查并安装每个包
function checkPackages() {
    echo "check packages ..."
    for pkg in "${packages[@]}"; do
        if dpkg-query -W "$pkg" >/dev/null 2>&1; then
            echo "$pkg installed,skip"
        else
            echo "install  $pkg..."
            sudo apt update
            sudo apt install -y "$pkg"
        fi
    done
}

function install() {
cd $workDir
/usr/bin/expect <<EOF
spawn sh -c {curl https://install.fuel.network | sh}
expect {
    "Would you like fuelup-init to modify your PATH variable for you? (N/y)" {
        send "y\r"
        exp_continue
    }
    eof
}
EOF
. $HOME/.bashrc
export PATH="$HOME/.fuelup/bin:$PATH" && fuel-core -V
git clone https://github.com/FuelLabs/chain-configuration.git
echo $rpckey $moniker
rpc="https://sepolia.infura.io/v3/$rpckey"
echo $rpc
fuel-core-keygen new --key-type peering 2>&1 |tee $workDir/fuel_key
keypair=$(cat $workDir/fuel_key |awk -F':' '{print $3}' |awk -F'"' '{print $2}')
cat >$workDir/fuel.sh<<EOF
fuel-core run \
--service-name="$moniker" \
--keypair $keypair \
--relayer $rpc \
--ip=0.0.0.0 --port=4000 --peering-port=30333 \
--db-path=$workDir/.fuel-sepolia-testnet \
--snapshot $workDir/chain-configuration/ignition/ \
--utxo-validation --poa-instant false --enable-p2p \
--reserved-nodes /dns4/p2p-testnet.fuel.network/tcp/30333/p2p/16Uiu2HAmDxoChB7AheKNvCVpD4PHJwuDGn8rifMBEHmEynGHvHrf \
--sync-header-batch-size 100 \
--enable-relayer \
--relayer-v2-listening-contracts=0x01855B78C1f8868DE70e84507ec735983bf262dA \
--relayer-da-deploy-height=5827607 \
--relayer-log-page-size=500 \
--sync-block-stream-buffer-size 30
EOF
pm2 start $workDir/fuel.sh --name fuel-core && pm2 save
}

function start() {
    echo "start ..."
    checkVars
    pm2 start fuel-core
}

function stop() {
    echo "stop ..."
    pm2 stop fuel-core
}

function upgrade() {
    echo "upgrade ..."
    pm2 stop fuel-core
    cd $workDir
    /usr/bin/expect <<EOF
    spawn sh -c {curl https://install.fuel.network | sh}
    expect {
    "Would you like fuelup-init to modify your PATH variable for you? (N/y)" {
        send "y\r"
        exp_continue
    }
    eof
}
EOF
fuel-core -V
pm2 restart fuel-core
}

function check() {
    echo "check ..."
    pm2 list 
}
function stop(){
    pm2 stop fuel-core
}
funciton start(){
    pm2 start fuel-core
}
function clean() {
    echo "clean ...."
    pm2 stop fuel-core && pm2 delete fuel-core && pm2 save
    rm -rf $workDir
}
function logs() {
    echo "logs ...."
    pm2 logs fuel-core
}
function version(){
    $HOME/.fuelup/bin/fuel-core -V
}


function About() {
    echo '   _____    ___     ______   ______   ___
  / ___/   /   |   /_  __/  / ____/  /   |
  \__ \   / /| |    / /    / __/    / /| |
 ___/ /  / ___ |   / /    / /___   / ___ |
/____/  /_/  |_|  /_/    /_____/  /_/  |_|'

    echo
    echo -e "\xF0\x9F\x9A\x80 Satea Node Installer
Website: https://www.satea.io/
Twitter: https://x.com/SateaLabs
Discord: https://discord.com/invite/satea
Gitbook: https://satea.gitbook.io/satea
Version: V1.0.0
Introduction: Satea is a DePINFI aggregator dedicated to breaking down the traditional barriers that limits access to computing resources.  "
    echo""
}

case $1 in
check-packages)
    checkPackages
    ;;
install)
    if [ "$2" = "--auto" ]; then
        #这里使用自动模式下的 安装 函数
        install
    else
        #手动模式 使用Manual 获取用户输入的变量
        readVariables #获取用户输入的变量
        . .env.sh     #导入变量
        #其他安装函数
        install
    fi
    ;;
start)
    start
    ;;
stop)
    stop
    ;;
upgrade)
    upgrade
    ;;
check)
    check
    ;;
clean)
    clean
    ;;
logs)
    logs
    ;;
version)
    version
    ;;

**)

    #定义帮助信息 例子
    About
    echo "Flag:
  check-packages       Check basic installation package
  install              Install $projectName environment
  start                Start the $projectName service
  stop                 Stop the $projectName service
  upgrade              Upgrade an existing installation of $projectName
  check                Check $projectName service status
  clean                Remove the $projectName from your service, remove data!!! 
  logs                 Show the logs of the $projectName service
  version              show the version of the $projectName service "
    ;;
esac
